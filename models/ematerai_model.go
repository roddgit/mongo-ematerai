package models

import (
	"encoding/json"
)

// import "go.mongodb.org/mongo-driver/bson/primitive"

type Login struct {
	// Id       primitive.ObjectID `json:"id,omitempty"`
	User     string `json:"user,omitempty" validate:"required"`
	Password string `json:"password,omitempty" validate:"required"`
}

// https://mholt.github.io/json-to-go/
type AutoGeneratedLogin struct {
	Message string `json:"message"`
	Result  struct {
		Data struct {
			Login struct {
				Token string `json:"token"`
				User  struct {
					Accounts []struct {
						Companys []struct {
							Nama string `json:"nama"`
						} `json:"companys"`
						Desc      interface{} `json:"desc"`
						ID        string      `json:"id"`
						Parent    interface{} `json:"parent"`
						Statusreg string      `json:"statusreg"`
						Tipeacct  string      `json:"tipeacct"`
						Tipepay   string      `json:"tipepay"`
					} `json:"accounts"`
					Email       string `json:"email"`
					FirstLogin  bool   `json:"firstLogin"`
					FirstName   string `json:"firstName"`
					ID          string `json:"id"`
					LastName    string `json:"lastName"`
					PhoneNumber string `json:"phoneNumber"`
					Role        string `json:"role"`
					Userdetails []struct {
						Locationother []struct {
							CustID  int    `json:"custID"`
							ID      string `json:"id"`
							Loccode string `json:"loccode"`
							Loctype struct {
								Description string `json:"description"`
							} `json:"loctype"`
							Tpay string `json:"tpay"`
						} `json:"locationother"`
						Locations []struct {
							CustID  int    `json:"custID"`
							ID      string `json:"id"`
							Loccode string `json:"loccode"`
							Loctype struct {
								Description string `json:"description"`
							} `json:"loctype"`
							Tpay string `json:"tpay"`
						} `json:"locations"`
					} `json:"userdetails"`
				} `json:"user"`
			} `json:"login"`
		} `json:"data"`
	} `json:"result"`
	StatusCode string `json:"statusCode"`
	Token      string `json:"token"`
}

type DynamicGeneratedLogin struct {
	Message    string                   `json:"message"`
	Result     map[string]*structChange `json:"result"`
	StatusCode string                   `json:"statusCode"`
	Token      string                   `json:"token"`
}

type SaveLogin struct {
	User_id       string `json:"user_id"`
	Email         string `json:"email"`
	Account_type  string `json:"account_type"`
	Token         string `json:"token"`
	Date_modified string `json:"date_modified"`
}

type structChange struct {
	Changes map[string]string `json:"*"`
}

func (s structChange) MarshalJSON() ([]byte, error) {
	// if empty retrun `"="`
	if len(s.Changes) == 0 {
		return []byte(`"="`), nil
	}

	// otherwise marshal as is
	type T structChange
	return json.Marshal(T(s))
}

func (s *structChange) UnmarshalJSON(data []byte) error {
	// if `"="`, ignore
	if string(data) == `"="` {
		return nil
	}

	// otherwise assume it's a valid object
	type T structChange
	return json.Unmarshal(data, (*T)(s))
}
